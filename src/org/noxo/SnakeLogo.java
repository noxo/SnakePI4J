package org.noxo;

// Erkki 23-Jul-2014

public class SnakeLogo {
	
	// LOGO BMP: http://yournokia.free.fr/nokia/startup_logos.html
	// LOGO CONVERSION: http://www.henningkarlsen.com/electronics/t_imageconverter_mono.php
	
	// This data is in PCD8544 format, some specifications:
	// http://forum.evilmadscientist.com/discussion/11/nokia-pcd8544-5110-lcd-display-is-a-little-strange

	//	So, after going back and looking at the library, things are slightly stranger than I thought.  The drawBitmap function assumes that each byte
	//	you hand it is a column (yes, really) of 8 bits, but the columns are 
	//	written out from left to right, then top to bottom.  So the first byte 
	//	represents the top, left column of 8 bits.  The second represents the 
	//	one to the right of it, and so on.  It's quite odd.  It draws it back 
	//	out with this code:
	
	//	void Adafruit_GFX::drawBitmap(int16_t x, int16_t y, 
	//			  const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
	//			 for (int16_t j=0; j<h; j++) {
	//			  for (int16_t i=0; i<w; i++ ) {
	//			    if (pgm_read_byte(bitmap + i + (j/8)*w) & _BV(j%8)) {
	//			      drawPixel(x+i, y+j, color);
	//			    }
	//			  }
	//			 }
	//	}
	
	public final static int NOKIA[] =
	{
		0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,   // 0x0010 (16) pixels
		0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x40, 0x80, 0x80, 0xC0, 0xC0, 0x40, 0xC0, 0xA0, 0xE0, 0xC0,   // 0x0020 (32) pixels
		0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xEE, 0xF4, 0xF0, 0xF0, 0x70, 0x30,   // 0x0030 (48) pixels
		0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x0C, 0x9C, 0x1C, 0x38, 0xB8, 0x38, 0x38, 0xB8, 0xF8, 0xF0,   // 0x0040 (64) pixels
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,   // 0x0050 (80) pixels
		0xF8, 0xF8, 0xF8, 0xF8, 0x88, 0x20, 0x8A, 0x20, 0x08, 0x22, 0x08, 0x00, 0x0A, 0x00, 0x00, 0x02,   // 0x0060 (96) pixels
		0x80, 0x71, 0xBA, 0xDA, 0xFD, 0xDD, 0xED, 0xDE, 0xEE, 0xF7, 0xFF, 0xFB, 0xFD, 0xFD, 0xFE, 0xFF,   // 0x0070 (112) pixels
		0x7F, 0x3F, 0x1F, 0x9F, 0x3F, 0x7F, 0x6F, 0x0F, 0xAF, 0x1F, 0xBF, 0x3E, 0x3C, 0x7A, 0x78, 0x70,   // 0x0080 (128) pixels
		0x22, 0x88, 0xA0, 0x2A, 0x80, 0x08, 0x62, 0xE0, 0xE0, 0xF2, 0xF0, 0x58, 0xDA, 0xF8, 0xFC, 0x92,   // 0x0090 (144) pixels
		0xFE, 0xFF, 0xFF, 0xD3, 0xFF, 0xFD, 0xF3, 0xE1, 0xF0, 0xF9, 0x7F, 0xBF, 0x3F, 0x8F, 0x2F, 0x4F,   // 0x00A0 (160) pixels
		0xAF, 0x0F, 0x4F, 0xA7, 0x0F, 0xAF, 0x87, 0x2F, 0x82, 0x80, 0x20, 0xC0, 0x80, 0x80, 0x50, 0x40,   // 0x00B0 (176) pixels
		0xC4, 0xD0, 0xA0, 0xE8, 0xE4, 0xEA, 0xFF, 0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x4F,   // 0x00C0 (192) pixels
		0x27, 0x53, 0xA8, 0x54, 0x29, 0x4A, 0xB5, 0x82, 0xAC, 0xA1, 0x8A, 0xB6, 0x50, 0x4D, 0x32, 0xA4,   // 0x00D0 (208) pixels
		0x4A, 0xB4, 0xA9, 0x4A, 0x52, 0xB4, 0xAA, 0x45, 0xA8, 0xDA, 0x22, 0xAC, 0xD2, 0x2A, 0x52, 0xA8,   // 0x00E0 (224) pixels
		0x52, 0x4C, 0xB0, 0xAD, 0x43, 0x5B, 0xB3, 0x45, 0xA8, 0x5B, 0xA3, 0xAB, 0x55, 0xA8, 0x52, 0x54,   // 0x00F0 (240) pixels
		0xA9, 0x56, 0xA8, 0x45, 0xBA, 0xA4, 0x49, 0x5A, 0xA2, 0x54, 0xAA, 0x52, 0xFE, 0xFF, 0xFF, 0xFE,   // 0x0100 (256) pixels
		0xFD, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,   // 0x0110 (272) pixels
		0xFF, 0x7F, 0xFF, 0xFE, 0xBF, 0x7F, 0xBF, 0xBF, 0xFF, 0xDF, 0xBF, 0x5F, 0xDF, 0x7F, 0xDF, 0x7F,   // 0x0120 (288) pixels
		0xDF, 0xAF, 0x7F, 0xEE, 0x8E, 0xF1, 0x6E, 0x99, 0xF7, 0x6A, 0xDD, 0xB2, 0x6E, 0xD5, 0x7A, 0xD7,   // 0x0130 (304) pixels
		0xAC, 0x75, 0xDB, 0x6D, 0xD5, 0x7A, 0xD7, 0xAC, 0x7B, 0xE5, 0xDE, 0xA9, 0x77, 0xDA, 0xB5, 0xEE,   // 0x0140 (320) pixels
		0x59, 0xB6, 0xEB, 0xDD, 0xB6, 0x69, 0xD6, 0xBF, 0xE8, 0x55, 0xEF, 0xB9, 0xD6, 0xED, 0xB5, 0x5B,   // 0x0150 (336) pixels
		0xAB, 0xFF, 0xFD, 0xF7, 0xFF, 0x01, 0x01, 0x01, 0x01, 0xE1, 0xC1, 0x81, 0x03, 0x05, 0x0F, 0x1D,   // 0x0160 (352) pixels
		0x2F, 0x7E, 0x01, 0x00, 0x01, 0x01, 0xFF, 0xFE, 0x03, 0x01, 0x01, 0x00, 0xF1, 0xF0, 0xF1, 0x71,   // 0x0170 (368) pixels
		0xF1, 0xF1, 0xB1, 0xF1, 0x01, 0x01, 0x01, 0x03, 0xFE, 0xFF, 0x01, 0x01, 0x01, 0x01, 0xBE, 0x1B,   // 0x0180 (384) pixels
		0x0D, 0x07, 0x03, 0x41, 0xE1, 0xF1, 0xF9, 0x6D, 0xFF, 0xFF, 0x00, 0x01, 0x01, 0x01, 0xFF, 0xFF,   // 0x0190 (400) pixels
		0xEB, 0x3E, 0x0D, 0x03, 0x01, 0x41, 0x71, 0x70, 0x41, 0x01, 0x03, 0x0E, 0x3B, 0xEF, 0xFE, 0xFB,   // 0x01A0 (416) pixels
		0xEE, 0x7D, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF,   // 0x01B0 (432) pixels
		0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xF8, 0xF0, 0xF0, 0xF0,   // 0x01C0 (448) pixels
		0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF1, 0xF0, 0xF0, 0xF0, 0xF8, 0xFF, 0xFF, 0xF0, 0xF0,   // 0x01D0 (464) pixels
		0xF0, 0xF0, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xF0, 0xF1, 0xF3, 0xF7, 0xFF, 0xFF, 0xF0, 0xF0,   // 0x01E0 (480) pixels
		0xF0, 0xF0, 0xFF, 0xF3, 0xF0, 0xF0, 0xF0, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF0,   // 0x01F0 (496) pixels
		0xF0, 0xF0, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	};
	
}
